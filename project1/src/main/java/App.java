import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        Device[] devices = new Device[] { new Screen(), new Printer() };
        Shape[] shapes = new Shape[] { new Line(), new Circle() };
        for (Device device : devices) {
            for (Shape shape : shapes) {
                device.draw(shape);
            }
        }
    }

    abstract static class Shape {
        public abstract void draw(Screen s);
        public abstract void draw(Printer s);
    }

    static class Line extends Shape {
        @Override
        public void draw(Screen s) {
            System.err.println("drawing a line on screen!");
        }

        @Override
        public void draw(Printer s) {
            System.err.println("drawing a line on printer!");
        }
    }

    static class Circle extends Shape {
        @Override
        public void draw(Screen s) {
            System.err.println("drawing a circle on screen!");
        }

        @Override
        public void draw(Printer s) {
            System.err.println("drawing a circle on printer!");
        }
    }

    static class Screen extends Device {
        public void draw(Shape s){
            s.draw(this);
        }
    }

    static class Printer extends Device {
        public void draw(Shape s){
            s.draw(this);
        }
    }


    static class Device {
        public void draw(Shape s) {
            invoke(this, "draw", s);
        }

        static Object invoke(Object receiver, String name, Object arg) {
            try {
                Method method = bestMethod(receiver.getClass(), name, arg.getClass());
                return method.invoke(receiver, arg);
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                throw new RuntimeException(e);
            }
        }

        static Method bestMethod(Class type, String name, Class argType) throws NoSuchMethodException {
            try {
                return type.getMethod(name, argType);
            } catch (NoSuchMethodException e) {
                if (argType == Object.class) {
                    throw new NoSuchMethodException(name);
                } else {
                    return bestMethod(type, name, argType.getSuperclass());
                }
            }
        }
    }
}
