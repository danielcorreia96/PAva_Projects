/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

// Define the main class for the application
mainClassName = 'ist.meic.pa.GenericFunctions.WithGenericFunction'
def extendedMainClassName = 'ist.meic.pa.GenericFunctionsExtended.WithGenericFunction'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    compile 'org.javassist:javassist:3.22.0-GA'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


jar {
    archiveName 'genericFunctions.jar'
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

test {
    //we want display the following test events
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

def EXAMPLES_GROUP = "Examples Apps"

task runBasicEnunciado {
    group = EXAMPLES_GROUP
    description = "Runs all examples apps"
    dependsOn 'compileJava'
    [
            "examples.enunciado.ColorApp",
            "examples.enunciado.ComApp",
            "examples.enunciado.DeviceApp",
            "examples.enunciado.ExplainApp",
    ].each { file ->
        doLast {
            println ""
            println file
            javaexec {
                ignoreExitValue true
                classpath = sourceSets.main.runtimeClasspath
                main = mainClassName
                args = [file]
            }
            println ""
        }
    }
}

task runExtendedAroundMethodVoidColor(type: JavaExec) {
    group = EXAMPLES_GROUP
    description = "Runs extended version of aroundTests.VoidColorApp example"
    classpath = sourceSets.main.runtimeClasspath
    args = ["examples.aroundTests.VoidColorApp"] // working
    main = extendedMainClassName
}

task runExtendedAroundMethodStringColor(type: JavaExec) {
    group = EXAMPLES_GROUP
    description = "Runs extended version of aroundTests.StringColorApp example"
    classpath = sourceSets.main.runtimeClasspath
    args = ["examples.aroundTests.StringColorApp"] // working
    main = extendedMainClassName
}

task runExtendedCached {
    group = EXAMPLES_GROUP
    description = "Runs all examples apps"
    dependsOn 'compileJava'
    [
        "examples.cachedTests.ColorApp",
        "examples.cachedTests.ComApp",
        "examples.cachedTests.DeviceApp",
        "examples.cachedTests.ExplainApp",
    ].each { file ->
        doLast {
            println ""
            println file
            javaexec {
                ignoreExitValue true
                classpath = sourceSets.main.runtimeClasspath
                main = extendedMainClassName
                args = [file]
            }
            println ""
        }
    }
}

task generateClasses {
    dependsOn 'compileJava'
    [
        "pa.tests.TestA",
//        "pa.tests.TestB",
//        "pa.tests.TestC",
//        "pa.tests.TestD",
//        "pa.tests.TestE",
//        "pa.tests.TestF",
//        "pa.tests.TestG",
//        "pa.tests.TestH",
//        "pa.tests.TestI",
//        "pa.tests.TestJ",
//        "pa.tests.TestK",
//        "pa.tests.TestL",
//        "pa.tests.TestM",
//        "pa.tests.TestN",
//        "pa.tests.TestO",
//        "pa.tests.TestP",
    ].each { file ->
        doLast {
            println ""
            println file
            javaexec {
                ignoreExitValue true
                classpath = sourceSets.main.runtimeClasspath
                main = mainClassName
                args = [file]
            }
            println ""
        }
    }
}

task specialTestCases {
    dependsOn 'compileJava'
    [
        "pa.tests.special.TestE",
        "pa.tests.special.TestF",
        "pa.tests.special.TestJ",
        "pa.tests.special.TestO",
    ].each { file ->
        doLast {
            println ""
            println file
            javaexec {
                ignoreExitValue true
                classpath = sourceSets.main.runtimeClasspath
                main = mainClassName
                args = [file]
            }
            println ""
        }
    }
}



task myTestCases {
    dependsOn 'compileJava'
    [
            "examples.myTests.TestC4",
//            "examples.myTests.TestC5",
//            "examples.myTests.TestC6",
//            "examples.myTests.TestC7",
//            "examples.myTests.TestC8",
//            "examples.myTests.TestC9",
    ].each { file ->
        doLast {
            println ""
            println file
            javaexec {
                ignoreExitValue true
                classpath = sourceSets.main.runtimeClasspath
                main = mainClassName
                args = [file]
            }
            println ""
        }
    }
}

test {
    forkEvery = 1
}